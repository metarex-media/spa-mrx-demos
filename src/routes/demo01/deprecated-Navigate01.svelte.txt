<script lang="ts">
	/** Copyright Â©2023-2024   Metarex.Media   hello@metarex.media
	 *  BSD 3 Clause License   https://opensource.org/license/bsd-3-clause/
	 * ------------------------------------------------------------------------
	 */
	import { nilEvent, type DemoCfg, type DemoSource, type DemoCfgs, type MrxEvent } from '$lib/mrx-demo-defs';
	import { source, activeSource, demoId } from '$lib/mrx-demo-stores';
	import { timeOfDay } from './control-stores';
	import Timer from './Timer.svelte';

	export let cfgData;
	export let sources: DemoSource[] = [];
	export let rundown: MrxRundown = [];

	let DBG = false;

	let width = $cfgData.appearance.navigate.width;
	let color = $cfgData.appearance.navigate.color;
	let numEvents = 5;
	let eventList: MrxEvent[] = [];
	let nextRender: number;

	let pushEvent = (e: MrxEvent, dueIn: number, status: string) => {
		let d = new Date();
		let hh = Number(e.time.toString().slice(0, 2));
		let mm = Number(e.time.toString().slice(3));
		let start = new Date(d.getFullYear(), d.getMonth(), d.getDate(), hh, mm, 0);
		let color;
		switch (status) {
			case 'past':
				color = 'grey';
				break;
			case 'active':
				$activeSource = sources[e.srcIndex];
				$activeSource.xtra = [e];
				color = 'green';
				break;
			case 'next':
				color = 'yellow';
				break;
		}

		const event: MrxEvent = {
			time: start.getTime(),
			headline: e.headline,
			dueMins: dueIn,
			status: status,
			source: sources[e.src],
			color: color
		};
		eventList.push(event);
	};

	let updateEventList = () => {
		let justGone: MrxEvent = nilEvent;
		let gotActive = false;
		let now = new Date($timeOfDay);
		let rr = new Date($timeOfDay);
		rr.setMinutes(rr.getMinutes() + 1);
		nextRender = rr.getTime();
		let refMins = 60 * now.getHours() + now.getMinutes();
		LPXrundown.forEach((e) => {
			let hh = Number(e.time.slice(0, 2));
			let mm = Number(e.time.slice(3));
			let start = new Date(2024, 3, 12, hh, mm, 0);
			let mins = 60 * start.getHours() + start.getMinutes();
			let dueIn = mins - refMins;
			if (dueIn < 0) {
				justGone = e;
			} else if (dueIn < 1) {
				pushEvent(justGone, dueIn, 'past');
				pushEvent(e, dueIn, 'active');
				gotActive = true;
			} else if (eventList.length < numEvents) {
				let type = gotActive ? 'next' : 'future';
				gotActive = false;
				pushEvent(e, dueIn, type);
			}
		});
		return eventList;
	};
	let seconds: number;
	$: {
		eventList = updateEventList();
		console.log('event list has ', eventList.length, 'elements');
	}
	$: {
		seconds = new Date($timeOfDay).getSeconds();
		if (seconds == 0) {
			eventList = [];
			eventList = updateEventList();
		}
	}

	let navClick = (i: number) => {
		$source = eventList[i].src;
	};
</script>

<div class="{color} {width} wide column" style="height:50vh;">
	<Timer />
	{#if DBG}<p>{seconds}</p>{/if}
	<div class="ui scrolling segmnet" style="height:100%;">
		{#each eventList as event, i}
			<button class="ui attached fluid {event.color} message" on:click={() => navClick(i)}>
				{new Date(event.time).toTimeString().slice(0, 8)}<br />
				{event.headline}
			</button>
		{/each}
	</div>
</div>

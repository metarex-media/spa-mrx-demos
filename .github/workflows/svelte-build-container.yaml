# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Build Metarex staging website to container

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# global environment
env:
  ArtifactsName: spa-mrx-demos

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages:    write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run
# in-progress and latest queued. However, do NOT cancel in-progress runs as we
# want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  bark:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      -
        name: Bark some context vairables
        run: |
          source ./clogrc/_inc.sh
          BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          printf "GitHub workflow\n"
          printf "Hub: %19s  %s\n" "whoami"               "$(whoami)"
          printf "Hub: %19s  %s\n" "pwd"                  "$(pwd)"
          printf "Hub: %19s  %s\n" "PATH"                 "$PATH"
          printf "Hub: %19s  %s\n" "vCODE"                "$vCODE"
          printf "Hub: %19s  %s\n" "PROJECT"              "$PROJECT"
          printf "Hub: %19s  %s\n" "BRANCH"               "$BRANCH"
          printf "Hub: %19s  %s\n" "dockerAcc"            "$dockerAcc"
          printf "Hub: %19s  %s\n" "vars.MRX_DOCKER_NS"   "${{ vars.MRX_DOCKER_NS }}"
          printf "Hub: %19s  %s\n" "dockerBase"           "$dockerBase"
          printf "Hub: %19s  %s\n" "github.actor"         "${{ github.actor }}"
          printf "Hub: %19s  %s\n" "github.ref"           "${{ github.ref }}"
          printf "Hub: %19s  %s\n" "github.head_ref"      "${{ github.head_ref }}"
          printf "Hub: %19s  %s\n" "github.repository"    "${{ github.repository }}"
          printf "Hub: %19s  %s\n" "github.workspace"     "${{ github.workspace }}"
          printf "Hub: %19s  %s\n" "github.server_url"    "${{ github.server_url }}"
          printf "Hub: %19s  %s\n" "runner.temp"          "${{ runner.temp }}"
          echo ""
          echo        "BRANCH=$BRANCH"    >> $GITHUB_ENV
          echo "export BRANCH=$BRANCH"    >> job-chain.sh
          echo        "PROJECT=$PROJECT"  >> $GITHUB_ENV
          echo "export PROJECT=$PROJECT"  >> job-chain.sh
          echo        "vCODE=$vCODE"      >> $GITHUB_ENV
          echo "export vCODE=$vCODE"      >> job-chain.sh
          echo        "dockerAcc=$dockerAcc"  >> $GITHUB_ENV
          echo "export dockerAcc=$dockerAcc"  >> job-chain.sh
          echo        "dockerBase=$dockerBase" >> $GITHUB_ENV
          echo "export dockerBase=$dockerBase" >> job-chain.sh
      -
        name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.ArtifactsName }}-1"
          path: job-chain.sh
          if-no-files-found: error
          retention-days:    1

  # Build job
  build:
    runs-on: ubuntu-latest
    needs: bark

    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      -
        name: Restore artifact
        uses: actions/download-artifact@v4
        with:
          name:  "${{ env.ArtifactsName }}-1"
      -
        name: Install node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: yarn
      -
        name: Install dependencies
        run: yarn
      -
        name: Build with svelte
        run: yarn run build
      -
        name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name:  "${{ env.ArtifactsName }}-2"
          path: |
            ./build
            Dockerfile
            job-chain.sh
          if-no-files-found: error
          retention-days:    5

  # Deployment job
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.MRX_DOCKER_USR }}
          password: ${{ secrets.MRX_DOCKER_PWD }}
      -
        name: Restore artifact
        uses: actions/download-artifact@v4
        with:
          name:  "${{ env.ArtifactsName }}-2"
      -
        name: Check website & set env
        run: |
              # create env from upstream dependencies
              source job-chain.sh
              echo "vCODE=$vCODE"     >> $GITHUB_ENV
              echo "BRANCH=$BRANCH"   >> $GITHUB_ENV
              echo "PROJECT=$PROJECT" >> $GITHUB_ENV
              echo "dockerAcc=$dockerAcc" >> $GITHUB_ENV
              echo "dockerBase=$dockerBase" >> $GITHUB_ENV
              #
              echo "----------------------------------------------------------"
              echo "Deploying website version ($vCODE) from branch ($BRANCH)"
              echo "pushing branch $BRANCH to hub: $dockerAcc/$dockerBase:$vCODE"
              echo "--- build folder -----------------------------------------"
              ls -al ./build
              echo "--- Dockerfile -------------------------------------------"
              cat Dockerfile
      -
        name: AMD - Build and push
        env:
          dockerAcc: ${{ env.dockerAcc }}
          dockerBase: ${{ env.dockerBase }}
          vCODE: ${{ env.vCODE }}
        uses: docker/build-push-action@v5
        with:
          # important that we use path context otherwise no output!
          context:   .
          push:      true
          tags: |
                "${{ env.dockerAcc  }}/${{ env.dockerBase  }}-amd:${{ env.vCODE }}"
          platforms: linux/amd64
      -
        name: ARM - Build and push
        env:
          dockerAcc: ${{ env.dockerAcc }}
          dockerBase: ${{ env.dockerBase }}
          vCODE: ${{ env.vCODE }}
        uses: docker/build-push-action@v5
        with:
          # important that we use path context otherwise no output!
          context:   .
          push:      true
          tags: |
                "${{ env.dockerAcc  }}/${{ env.dockerBase  }}-arm:${{ env.vCODE }}"
          platforms: linux/arm64
